[{"categories":["學習筆記"],"contents":"YT Web實驗室 最近發現一個YT頻道(Web實驗室)，有一系列講解Web後端基礎，覺得很棒~!\n04. 網路是如何運作的－從瀏覽器到伺服器(YT教學) Browser \u0026gt; URL \u0026gt; wifi/LAN \u0026gt; Router \u0026gt; Proxy(做快取) \u0026gt; Routers(中華電信..等) \u0026gt; DNS \u0026gt; Proxy(Load balancing) \u0026gt; Port(埠號) \u0026gt; Web Server\n  流量大的網站會由 Proxy 做負載平衡(Load balancing)\n  Proxy 用途是作為反向代理、Http Cache、負載平衡器、防火牆，如:Nginx\n  由Reverse Proxy決定Port\n  正向代理/反向代理(Forward Proxy/Reverse Proxy)\n  05. ","permalink":"https://jackyliu556.github.io/blog/backend/","tags":null,"title":"### 成為看起來很強的後端 (Web實驗室)"},{"categories":["Linux"],"contents":"Putty是什麼? PuTTY是一款整合虛擬終端、系統控制台和網路檔案傳輸為一體的自由及開放原始碼的程式。它支援多種網路協定，包括SCP，SSH，Telnet，rlogin和原始的通訊端連接。\nMack大大也推薦另一款 [MobaXterm]\n 1. 安裝 安裝及設定部分很簡單，上網搜尋便有很多 [參考]\n2. 配色方案 由於Putty原始配色很難看清楚，所以我改了配置 [配色方案]\n3. 操作Putty及Linux基本指令 除了 cd + (url) 和 ls，ll 還記得外\n  pwd : 查看路徑\n  less + fileName : 查看大文件和跟蹤log\n 退出，「q」退出less 文件的開頭，「g」鍵 文件的末尾，「G」鍵。 向下移動一頁，「Space」鍵「PgDn」鍵 向上移動一頁，「b」鍵「PgUp」鍵    less 搜尋特定字樣 / + 查詢字串\n 上一個匹配的文本，「N」鍵 下一個匹配的文本，「n」鍵    [參考網址]]\n","permalink":"https://jackyliu556.github.io/blog/putty/","tags":null,"title":"### 複習一下Putty和Linux基本指令"},{"categories":null,"contents":"太陽vs公鹿 萬眾矚目，兩支隊伍終於在東西區脫穎而出，雖然實力不俗，但卻不是外界預測的大熱門\n籃網(KD,KI,James Harden) 或 湖人(衛冕冠軍LBJ,AD)\n今年季後賽，成為史上明星傷病最多的[報導]，也是促成冠軍組合原因之一\n季後賽相關報導   史無前例的故事發展 太陽與CP3的驚奇之旅\n  Ben Simmons罰球弱點成致命傷\n  不爽吹罰而消極比賽？詹皇末節放棄拚戰引發爭議\n  ","permalink":"https://jackyliu556.github.io/life/nba_20201_finals/","tags":null,"title":"### NBA / 2021 finals 新面貌 / 太陽vs公鹿 !"},{"categories":["Spring Boot"],"contents":"Spring Data JPA 使用ORM的概念，透過操作Java Object 的方式，去操作資料庫\n 1. 資料庫連線(參考影片) 官網並安裝MySQL DB\n下載\n2. 資料庫連線設定(參考影片) 設定application.properties  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Taipei\u0026amp;character-set=utf8 spring.datasource.username=root spring.datasource.password=springboot 設定pom.yml  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 3. 建立Class對應到資料庫 @Entity @Table(name = \u0026quot;student\u0026quot;) public class Student { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \u0026quot;id\u0026quot;) Integer id; @Column(name = \u0026quot;name\u0026quot;) String name; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } 4. 建立Repository並繼承CrudRepository public interface StudentRepository extends CrudRepository\u0026lt;Student, Integer\u0026gt; { } 5. 建立Controller @RestController public class StudentController { @Autowired private StudentRepository studentRepository; @PostMapping(\u0026quot;/students\u0026quot;) public String insert(@RequestBody Student student) {\tstudentRepository.save(student); return \u0026quot;jpa 執行資料庫 Create 操作\u0026quot;; } } 範例程式碼(GitHub)\n","permalink":"https://jackyliu556.github.io/blog/springdatajpa/","tags":null,"title":"### Spring Data JPA，建立Repository"},{"categories":["Spring Boot"],"contents":"Spring JDBC 在Spring Boot中執行原始的SQL語法，去操作資料庫\n 1. 資料庫連線(參考影片) 官網並安裝MySQL DB\n下載\n2. 資料庫連線設定(參考影片) 設定application.properties  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Taipei\u0026amp;character-set=utf8 spring.datasource.username=root spring.datasource.password=springboot 設定pom.yml  \t\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-jdbc\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 3. 建立Class  public class Student { Integer id; String name; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } 4. 建立Controller-service-dao  Controller  \t@GetMapping(\u0026quot;/jdbc/students/{studendId}\u0026quot;) public Student select(@PathVariable Integer studendId) { System.out.println(\u0026quot;jdbc 執行查詢 並實現 MVC\u0026quot;); return studentService.getById(studendId); }  Service  @Component public class StudentServiceImpl implements StudentService{ @Autowired private StudentDao studentDao; @Override public Student getById(Integer studentId) { return studentDao.getById(studentId); } }  Dao  @Component public class StudentDao { @Autowired private NamedParameterJdbcTemplate namedParameterJdbcTemplate; public Student getById(Integer studentId) { String sql =\u0026quot;select id ,name from student where id = :studentId\u0026quot;; Map\u0026lt;String,Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026quot;studentId\u0026quot;, studentId); List\u0026lt;Student\u0026gt; list = namedParameterJdbcTemplate.query(sql, map,new StudentRowMapper()); if(list.size()\u0026gt;0) { return list.get(0); }else { return null;\t} } } 範例程式碼(GitHub)\n","permalink":"https://jackyliu556.github.io/blog/springjdbc/","tags":null,"title":"### Spring JDBC，建立Cotroller-Service-Dao"},{"categories":["Spring Boot"],"contents":"版本 apache-tomcat-8.5.68 [下載]\nopenjdk version 11.0.11 (cmd 鍵入java -version 查詢版本)\n 1. 快速創建Spring Boot 專案 2. 新增入口 @RestController public class MyController { @RequestMapping(\u0026quot;/index\u0026quot;) public String index() { return \u0026quot;Hello,word\u0026quot;; } } 3. pom.xml 設定   增加 \u0026lt;packaging\u0026gt;war\u0026lt;/packaging\u0026gt;\n  修改成\n\u0026lt;artifactId\u0026gt;spring-boot-starter-tomcat\u0026lt;/artifactId\u0026gt;\n\u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt;[說明]\n  完整 pom.xml :\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.5.2\u0026lt;/version\u0026gt; \u0026lt;relativePath/\u0026gt; \u0026lt;!-- lookup parent from repository --\u0026gt; \u0026lt;/parent\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;deployDemo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;deployDemo\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;Demo project for Spring Boot\u0026lt;/description\u0026gt; \u0026lt;packaging\u0026gt;war\u0026lt;/packaging\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;11\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-tomcat\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; 3. 打包.war，Maven install產生war檔案 4. 佈署到apache tomcat   apache-tomcat-8.5.68\\webapps 路徑下清空後貼入war檔案\n  apache-tomcat-8.5.68\\bin 執行批次檔startup.bat\n   開啟瀏覽器  http://localhost:8080/deployDemo-0.0.1-SNAPSHOT/index\ndeployDemo-0.0.1-SNAPSHOT為war名，會在webapp自動解開\n 範例程式碼(GitHub)\n參考文章-1\n參考文章-2\n","permalink":"https://jackyliu556.github.io/blog/deploy/","tags":null,"title":"### Spring Boot 部屬至tomcat"},{"categories":["Spring Boot"],"contents":"Swagger是什麼? Swagger 是一套 API 互動文件產生器，使用 HTML 與 Javascript 所編寫的一套 Open Source Software，支援了現在許多的 REST API，之所以會說這是一個互動的文件，除了顯示 API 輸出入規格外，也能夠讓使用者即時的在 Swagger UI 介面上對你的 Web API 進行測試，立刻就能看到執行結果。\n 1. Maven pom.xml 抓相關jar \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger-ui\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2. 配置Swagger config檔案 @Configuration @EnableSwagger2 public class SwaggerConf { @Bean public Docket createRestApi() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage(\u0026quot;com.kevin.controller\u0026quot;)) .paths(PathSelectors.any())//paths(PathSelectors.regex(\u0026quot;/.*\u0026quot;)) .build(); } private ApiInfo apiInfo() { return new ApiInfoBuilder() .title(\u0026quot;標題:Spring Boot中使用Swagger2建構RESTful APIs\u0026quot;) .description(\u0026quot;相關說明\u0026quot;) .termsOfServiceUrl(\u0026quot;https://www.pixnet.net/pcard/B0212066/\u0026quot;) .license(\u0026quot;Apache 2.0\u0026quot;) .licenseUrl(\u0026quot;http://www.apache.org/licenses/LICENSE-2.0.html\u0026quot;) .version(\u0026quot;1.0.0\u0026quot;) .build(); } } 3. 在controller新增API，並增加API說明  @Api(tags=\u0026quot;UserController\u0026quot;,description=\u0026quot;類別檔案說明\u0026quot;) @RestController public class UserController { @ApiOperation(value=\u0026quot;My first api\u0026quot;, notes=\u0026quot;API說明文字\u0026quot;) @PostMapping(\u0026quot;/api/v1\u0026quot;) public ResponseEntity hello(@RequestBody UserRequestDto dto){ System.out.println(dto); return ResponseEntity.ok(\u0026quot;Hello World\u0026quot;); } } 3. 輸入網址來測試 : http://localhost:8080/swagger-ui.html 範例程式碼(GitHub)\n參考文章\n","permalink":"https://jackyliu556.github.io/blog/swagger/","tags":null,"title":"### Spring Boot中使用Swagger2建構RESTful APIs"},{"categories":["Java"],"contents":"RESTful API 是什麼? Representational State Transfer，簡稱REST，它是一種網路架構風格，它並不是一種標準但不是規範，減少與前端溝通的成本。\n設計為 REST 的系統就可以稱為 RESTful。\n如何設計出RESTful API?   使用http method表示動作  使用url路徑描述資源之間的階層關係  response body 返回json或是xml格式  參考教學\n","permalink":"https://jackyliu556.github.io/blog/restful/","tags":null,"title":"### RESTful 風格API"},{"categories":["學習筆記"],"contents":"GA是什麼? Google提供的 Google Analytics 是所有網站最基本必裝的網站分析工具，不論你在賣什麼商品或是服務，肯定要知道Google Analytics如何分析，也必須了解它該如何操作與解讀才能協助你的業績蒸蒸日上！GA除了可以幫你估算銷售量、轉換率，方便你瞭解使用者如何使用你的網站、他們是從什麼管道搜尋或是連結前來，你的網站內容是否吸引人、符合使用者所需等，有些甚至能以圖示呈現資料，讓你一眼就清楚抓出自己想要的數據結果。\nGA Analytics (分析)\nGA安裝教學\nGTM是什麼? Google 代碼管理工具（Google Tag Manager, 以下簡稱GTM） 是一套代碼管理系統 (TMS)。在安裝完成後，網站分析師與行銷人員不用更改網站的程式碼，透過GTM即能輕易地將各種追蹤程式碼以及第三方應用工具安裝到網站中，讓追蹤和管理都在同一個平台完成。\n使用GTM 三大優點 :\n 行銷人員友善，簡化置入流程 提升網站速度 減少網站追蹤出錯機會  建議安裝Chrome外掛 Tag Assistant (by Google)，它可驗證你是否已在網頁上正確安裝了各種Google標籤\nGTM 代碼管理工具\n使用GTM安裝GA基礎追蹤碼\n","permalink":"https://jackyliu556.github.io/blog/ga/","tags":null,"title":"### Google Analytics (GA) 和 Google Tag Manager (GTM)"},{"categories":["學習筆記"],"contents":"Markdown是一種輕量級標記式語言，它能讓文件更容易閱讀、編寫。\nMarkdown不是要來取代HTML，是一種編寫的格式，HTML 是一種發佈的格式。\n大部分情況下是用來撰寫程式語言相關的文檔，因為純文字的特性與程式碼一致，且可搭配標示符號來改變呈現格式，像是在 Github 的文件中使用 readme.md 的 Markdown 格式，則會預設作為該儲存庫的介紹。\n 副檔名 : .md 方便撰寫工具 : Typora 缺點 :表格只有簡單行列，不能合併儲存格，可用圖片代替   Markdown語法 Markdown語法\n  內文 : 直接撰寫\n  標題 : 加上 #，數量代表 \u0026lt;h?\u0026gt; tag階層\n  粗體 : 加上 ** **\n  斜體 : 加上 * *\n  有序序列 \u0026amp; 無序序列\n  1. 第一项 2. 第二项 + 第一项 + 第二项 + 第三项  超連結 : Google  [Google](http://www.google.com.tw/)\n 圖片 :   ![RUNOOB 圖標](http://static.runoob.com/images/runoob-logo.png)\n  單行程式碼 \u0026amp; 多行程式碼 : 可以用 ``` 包裹一段代码，並指定一种语言\n  表格 : 使用 | 來分隔不同的單元格，使用 - 来分隔表頭和其他行\n  參考來源 : https://www.runoob.com/markdown/md-tutorial.html\n\n\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; 2021-06-25 add \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\nPS : Markdown沒有支持內嵌HTML和字體顏色\n 要在config.toml 加上才可以內嵌HTML  [markup.goldmark.renderer]\nunsafe = true\n  再用html改變字體顏色  \u0026lt;font color=\u0026quot;#dd0000\u0026quot;\u0026gt;浅红色文字：\u0026lt;/font\u0026gt;\u0026lt;br /\u0026gt;\n","permalink":"https://jackyliu556.github.io/blog/markdown/","tags":null,"title":"### Markdown - 輕量級標記式語言"},{"categories":["學習筆記"],"contents":"個人網站發佈，簡易步驟   clone gitHub (jackyliu556.github.io) 到本地端\n  用Git做版控，工具用SourceTree，可用SSH公鑰，http方式2021/08已改成access token\n  新增或修改content裡的md檔案\n  cmd輸入hugo server 啟動Hugo伺服器\n  檢視修改成果(Ex: http://localhost:1313/)\n  cmd輸入hugo(前提已安裝Hugo)，產生相對靜態檔案(public)\n  複製靜態檔(public)更新到git資料夾，並push至github\n  ","permalink":"https://jackyliu556.github.io/blog/hugo/","tags":null,"title":"### Hugo 佈版至 GitHub"}]